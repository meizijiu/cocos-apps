{"version":3,"sources":["file:///Users/mzwine/Codes/other/cocos-apps/watermelon/assets/GlobalScript/LayoutForTopToolAndBanner.ts"],"names":["_decorator","Component","UITransform","CCFloat","view","v3","ccclass","property","LayoutForTopToolAndBanner","start","visibleSize","getVisibleSize","scale","height","topOffset","bottomOffset","node","getComponent","oldPos","position","y","anchorY"],"mappings":";;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,O,OAAAA,O;AAAeC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,E,OAAAA,E;;;;;;;AAChEC,MAAAA,O,GAAsBN,U,CAAtBM,O;AAASC,MAAAA,Q,GAAaP,U,CAAbO,Q;;2CAGJC,yB,WADZF,OAAO,CAAC,2BAAD,C,UAGLC,QAAQ,CAACJ,OAAD,C,UAGRI,QAAQ,CAACJ,OAAD,C;;;;;;;;;;;;;;;;;;;;;eAGTM,K,GAAA,iBAAQ;AACN,cAAIC,WAAiB,GAAGN,IAAI,CAACO,cAAL,EAAxB;AACA,cAAIC,KAAK,GAAG,CAAZ;;AACA,cAAIF,WAAW,CAACG,MAAZ,GAAqB,KAAKC,SAA1B,GAAsC,KAAKC,YAA3C,GAA0D,KAAKC,IAAL,CAAUC,YAAV,CAAuBf,WAAvB,EAAoCW,MAAlG,EAA0G;AACxGD,YAAAA,KAAK,GAAG,CAACF,WAAW,CAACG,MAAZ,GAAqB,KAAKC,SAA1B,GAAsC,KAAKC,YAA5C,IAA4D,KAAKC,IAAL,CAAUC,YAAV,CAAuBf,WAAvB,EAAoCW,MAAxG;AACD;;AACD,eAAKG,IAAL,CAAUJ,KAAV,GAAkBP,EAAE,CAACO,KAAD,EAAQA,KAAR,EAAeA,KAAf,CAApB;AACA,cAAIM,MAAM,GAAGb,EAAE,CAAC,KAAKW,IAAL,CAAUG,QAAX,CAAf;AACAD,UAAAA,MAAM,CAACE,CAAP,GAAWV,WAAW,CAACG,MAAZ,GAAqB,CAArB,GAAyB,KAAKC,SAA9B,GAA0C,KAAKE,IAAL,CAAUC,YAAV,CAAuBf,WAAvB,EAAoCW,MAApC,IAA8C,IAAI,KAAKG,IAAL,CAAUC,YAAV,CAAuBf,WAAvB,EAAoCmB,OAAtF,IAAiGT,KAAtJ;AACA,eAAKI,IAAL,CAAUG,QAAV,GAAqBD,MAArB;AACD,S,CAED;AACA;AACA;;;;QAtB6CjB,S;;;;;iBAGlB,E;;;;;;;iBAGG,G","sourcesContent":["import { _decorator, Component, Node, UITransform, CCFloat, Size, view, v3 } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('LayoutForTopToolAndBanner')\nexport class LayoutForTopToolAndBanner extends Component {\n\n  @property(CCFloat)\n  public topOffset: number = 88;\n\n  @property(CCFloat)\n  public bottomOffset: number = 160;\n\n  start() {\n    let visibleSize: Size = view.getVisibleSize();\n    let scale = 1;\n    if (visibleSize.height - this.topOffset - this.bottomOffset < this.node.getComponent(UITransform).height) {\n      scale = (visibleSize.height - this.topOffset - this.bottomOffset) / this.node.getComponent(UITransform).height;\n    }\n    this.node.scale = v3(scale, scale, scale);\n    let oldPos = v3(this.node.position);\n    oldPos.y = visibleSize.height / 2 - this.topOffset - this.node.getComponent(UITransform).height * (1 - this.node.getComponent(UITransform).anchorY) * scale;\n    this.node.position = oldPos;\n  }\n\n  // update (deltaTime: number) {\n  //     // Your update function goes here.\n  // }\n}\n"]}