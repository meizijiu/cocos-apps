{"version":3,"sources":["file:///Users/mzwine/Codes/other/cocos-apps/watermelon/assets/GameScene/FruitCtrl.ts"],"names":["_decorator","Component","CCInteger","Collider","Vec3","Tween","RigidBody","fruit_config","CLIP","AudioHelper","NCKeys","NotificationCenter","ccclass","property","FruitCtrl","state","isPlayColliderAudio","onLoad","scale","id","node","playBornAnimation","startScale","tween","to","call","start","onEnable","collider","getComponent","on","onCollisionEnter","onCollisionStay","onDisable","event","play","DROP","solveCollision","onCollisionExit","length","otherCollider","otherCtrl","enabled","position","destroy","postNotice","MERGE_NEW_FRUIT","MERGRE"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, CCInteger, ICollisionEvent, ColliderComponent, Collider, Vec3, Tween, SafeAreaComponent, safeMeasureText, RigidBody } from 'cc';\nimport { fruit_config } from '../Config/fruit_config';\nimport { CLIP } from '../GlobalScript/AudioCtrl';\nimport { AudioHelper } from '../GlobalScript/AudioHelper';\nimport { NCKeys, NotificationCenter } from '../GlobalScript/NotificationCenter';\nconst { ccclass, property } = _decorator;\n\n@ccclass('FruitCtrl')\nexport class FruitCtrl extends Component {\n\n  @property(CCInteger)\n  public id: number = 0;\n\n  public state: 'WAIT' | 'FREE' | 'MERGE' = 'FREE';\n\n  public isPlayColliderAudio: Boolean = false;\n\n  onLoad() {\n    let scale = fruit_config[this.id].scale;\n    this.node.scale = new Vec3(scale, scale, scale);\n  }\n\n  playBornAnimation(startScale?: number) {\n    if (!startScale)\n      startScale = fruit_config[this.id - 1].scale;\n\n    this.node.scale = new Vec3(startScale, startScale, startScale);\n    this.state = 'WAIT';\n    let tween = new Tween(this.node);\n    let scale = fruit_config[this.id].scale;\n    tween\n      .to(0.2, { scale: new Vec3(scale, scale, scale) })\n      .call(() => {\n        this.state = 'FREE';\n      })\n      .start();\n  }\n\n  onEnable() {\n    let collider = this.getComponent(Collider);\n    collider.on('onCollisionEnter', this.onCollisionEnter, this);\n    collider.on('onCollisionStay', this.onCollisionStay, this);\n  }\n\n  onDisable() {\n    let collider = this.getComponent(Collider);\n    collider.on('onCollisionEnter', this.onCollisionEnter, this);\n    collider.on('onCollisionStay', this.onCollisionStay, this);\n  }\n\n  onCollisionEnter(event: ICollisionEvent) {\n    if (this.isPlayColliderAudio == false) {\n      AudioHelper.play('audio', CLIP.DROP);\n      this.isPlayColliderAudio = true;\n    }\n    this.solveCollision(event);\n  }\n\n  onCollisionStay(event: ICollisionEvent) {\n    this.solveCollision(event);\n  }\n\n  onCollisionExit() {\n\n  }\n\n  solveCollision(event: ICollisionEvent) {\n    if (this.id >= fruit_config.length - 1)\n      return;\n\n    if (this.state != 'FREE')\n      return;\n\n    if (!event.otherCollider)\n      return;\n\n    let otherCtrl: FruitCtrl = event.otherCollider.getComponent(FruitCtrl);\n    if (!otherCtrl)\n      return;\n\n    if (otherCtrl.state != 'FREE')\n      return;\n\n    if (otherCtrl.id != this.id)\n      return;\n\n\n    this.state = 'MERGE';\n    otherCtrl.state = 'MERGE';\n\n    // this.getComponent(RigidBody).enabled = false;\n    otherCtrl.getComponent(RigidBody).enabled = false;\n    let tween = new Tween(otherCtrl.node);\n    tween\n      .to(0.1, { position: new Vec3(this.node.position) })\n      .call(() => {\n        this.node.destroy();\n        otherCtrl.node.destroy();\n        NotificationCenter.postNotice(NCKeys.MERGE_NEW_FRUIT, {\n          id: this.id + 1,\n          position: new Vec3(this.node.position)\n        });\n      })\n      .start();\n    AudioHelper.play('audio', CLIP.MERGRE, false, 0.3);\n\n  }\n\n  // update (deltaTime: number) {\n  //     // Your update function goes here.\n  // }\n}\n"]}